// File X64-ASM.DEF
// This file contains the definitions of the most common IA32 Assembly Instructions

// The Definition is in the format:
// X64_ASM(code, mnemonic, flags, n_defs, n_uses, emitfunction, description)

// code: Canonical Name 
// mnemonic: string for the instruction name
// flags: bit vector with some details of the instruction
// n_defs: max number of defined registers
// n_uses: max number of used registers
// emitfunction: pointer to the emit function
// description: string with a textual description of the operation


X64_ASM(X64_ADC,		"adc",		0,									1,	2,		x64_Emit_ADC,		"Add with Carry")
X64_ASM(X64_ADD,		"add",		0,									1,	2,		x64_Emit_ADD,		"Add")
X64_ASM(X64_AND,		"and",		0,									1,	2,		x64_Emit_AND,		"Logical And")
X64_ASM(X64_BSF,		"bsf",		0,									1,	2,		x64_Emit_BSF,		"Bit Scan Forward")
X64_ASM(X64_BSR,		"bsr",		0,									1,	2,		x64_Emit_BSR,		"Bit Scan Reverse")		
X64_ASM(X64_BSWAP,		"bswap",	0,									1,	1,		x64_Emit_BSWAP,		"x64_BYTE Swap")
X64_ASM(X64_BT,			"bt",		0,									0,	2,		x64_Emit_BT,		"Bit Test")
X64_ASM(X64_BTC,		"btc",		0,									1,	2,		x64_Emit_BTC,		"Bit Test And Complement")
X64_ASM(X64_BTR,		"btr",		0,									1,	2,		x64_Emit_BTR,		"Bit Test And Reset")
X64_ASM(X64_BTS,		"bts",		0,									1,	2,		x64_Emit_BTS,		"Bit Test And Set")
X64_ASM(X64_CALL,		"call",		M_EAX|M_ECX|M_EDX|M_ESI|M_EDI|M_R8|M_R9|M_R10|M_R11,			0,	1,		x64_Emit_CALL,		"Call Procedure")
X64_ASM(X64_CBW,		"cbw",		0,									1,	1,		x64_Emit_CBW,		"Convert x64_BYTE To x64_WORD")
X64_ASM(X64_CDQ,		"cdq",		0,									1,	1,		x64_Emit_CDQ,		"Convert Doubleword To Quax64_DWORD")
X64_ASM(X64_CLC,		"clc",		0,									0,	0,		x64_Emit_CLC,		"Clear Carry Flag")
X64_ASM(X64_CLD,		"cld",		0,									0,	0,		x64_Emit_CLD,		"Clear Direction Flag")
X64_ASM(X64_CMC,		"cmc",		0,									0,	0,		x64_Emit_CMC,		"Complement Carry Flag")
X64_ASM(X64_CMOV,		"cmov",		NEED_CC,								1,	1,		x64_Emit_CMOV,		"Conditional Move - (only for PII and above)")
X64_ASM(X64_CMP,		"cmp",		0,									0,	2,		x64_Emit_CMP,		"Compare Two Operands")	
X64_ASM(X64_CMPSB,		"cmps",		M_ECX|M_EDI|M_ESI|U_ECX|U_EDI|U_ESI /* seem not to use ecx */,		0,	2,		x64_Emit_CMPS,		"Compare String Operands")
X64_ASM(X64_CMPXCHG,	"cmpxchg",	0,										2,	2,		x64_Emit_CMPXHG,	"Compare And Exchange")
X64_ASM(X64_CWD,		"cwd",		0,									1,	1,		x64_Emit_CWD,		"Convert x64_WORD To Doubleword")
X64_ASM(X64_CWDE,		"cwde",		0,									1,	1,		x64_Emit_CWDE,		"Convert x64_WORD To Doubleword")
X64_ASM(X64_DEC,		"dec",		0,									1,	1,		x64_Emit_DEC,		"Decrement By 1")
X64_ASM(X64_DIV,		"div",		M_EAX|M_EDX|U_EAX|U_EDX,						2,	2,		x64_Emit_DIV,		"Unsigned Divide")
X64_ASM(X64_IDIV,		"idiv",		M_EAX|M_EDX|U_EAX|U_EDX,						2,	2,		x64_Emit_IDIV,		"Signed Divide")
X64_ASM(X64_IMUL,		"imul",		M_EAX|M_EDX|U_EAX,							2,	2,		x64_Emit_IMUL,		"Signed Multiply")
X64_ASM(X64_INC,		"inc",		0,									1,	1,		x64_Emit_INC,		"Increment By 1")
X64_ASM(X64_J,			"j",		NEED_CC,								0,	1,		x64_Emit_J,			"Jump If Condition Is Met")
X64_ASM(X64_JECXZ,		"jecxz",	0,									0,	2,		x64_Emit_JECXZ,		"Jump If ECX Is Zero")
X64_ASM(X64_JMP,		"jmp",		0,									0,	1,		x64_Emit_JMP,		"Unconditional Jump")
X64_ASM(X64_LEA,		"lea",		0,									1,	1,		x64_Emit_LEA,		"Load Effective Address")
X64_ASM(X64_LODSB,		"lods",		0,									1,	1,		x64_Emit_LODS,		"Load String Operand")
X64_ASM(X64_LOOP,		"loop",		M_ECX|U_ECX,								0,	1,		x64_Emit_LOOP,		"Loop Count")
X64_ASM(X64_LOOPNZ,		"loopnz",	M_ECX|U_ECX,								0,	1,		x64_Emit_LOOPNZ,	"Loop Count While Zero/Equal")
X64_ASM(X64_LOOPZ,		"loopz",	M_ECX|U_ECX,								0,	1,		x64_Emit_LOOPZ,		"Loop Count While Not Zero/Equal")
X64_ASM(X64_MOV,		"mov",		0,									1,	1,		x64_Emit_MOV,		"Move Data")
X64_ASM(X64_MOVSB,		"movs",		M_ECX|M_EDI|M_ESI|U_ECX|U_EDI|U_ESI /* seem not to use ecx */,		0,	2,		x64_Emit_MOVS,		"Move Data From String To String")
X64_ASM(X64_MOVSX,		"movsx",	0,									1,	1,		x64_Emit_MOVSX,		"Move With Sign-Extend")
X64_ASM(X64_MOVZX,		"movzx",	0,									1,	1,		x64_Emit_MOVZX,		"Move With Zero-Extend")
X64_ASM(X64_MOVQ,		"movq", 	0,									1,	1,		x64_Emit_MOVQ, 		"Mov quadword from xmm reg to reg")
X64_ASM(X64_MUL,		"mul",		M_EAX|M_EDX|U_EAX,							0,	1,		x64_Emit_MUL,		"Unsigned Multiply")
X64_ASM(X64_NEG,		"neg",		0,									1,	1,		x64_Emit_NEG,		"Two's Complement Negation")
X64_ASM(X64_NOP,		"nop",		0,									0,	0,		x64_Emit_NOP,		"No Operation")
X64_ASM(X64_NOT,		"not",		0,									1,	1,		x64_Emit_NOT,		"One's Complement Negation")
X64_ASM(X64_OR,			"or",		0,									1,	2,		x64_Emit_OR,		"Logical Or")
X64_ASM(X64_POP,		"pop",		0,									1,	0,		x64_Emit_POP,		"Pop A x64_WORD From Stack")
X64_ASM(X64_POPFD,		"popfd",	0,									0,	0,		x64_Emit_POPFD,		"Pop Stack Into EFlags")
X64_ASM(X64_PUSH,		"push",		0,									0,	1,		x64_Emit_PUSH,		"Push Operand Onto The Stack")
X64_ASM(X64_PUSHFD,		"pushfd",	0,									0,	0,		x64_Emit_PUSHFD,	"Push Flags Reg Onto The Stack")
X64_ASM(X64_RET,		"ret",		0,									0,	0,		x64_Emit_RET,		"Return From Procedure")
X64_ASM(X64_ROL,		"rol",		/*U_ECX*/ 0,									1,	2,		x64_Emit_ROL,		"Rotate Left")
X64_ASM(X64_ROR,		"ror",		/*U_ECX*/ 0,									1,	2,		x64_Emit_ROR,		"Rotate Right")
X64_ASM(X64_SAL,		"sal",		/*U_ECX*/ 0,									1,	2,		x64_Emit_SAL,		"Shift Arithmetic Left")
X64_ASM(X64_SAR,		"sar",		/*U_ECX*/ 0,									1,	2,		x64_Emit_SAR,		"Shift Arithmetic Right")
X64_ASM(X64_SBB,		"sbb",		0,									1,	2,		x64_Emit_SBB,		"Integer Subtraction With Borrow")
X64_ASM(X64_SCASB,		"scas",		M_ECX|M_EDI|U_ECX|U_EDI,						0,	2,		x64_Emit_SCAS,		"Scan String")
X64_ASM(X64_SET,		"set",		NEED_CC,								0,	1,		x64_Emit_SET,		"x64_BYTE Set On Condition")
X64_ASM(X64_SHL,		"shl",		/*U_ECX*/ 0,									1,	2,		x64_Emit_SHL,		"Shift Left")
X64_ASM(X64_SHR,		"shr",		/*U_ECX*/ 0,									1,	2,		x64_Emit_SHR,		"Shift Right")
X64_ASM(X64_STC,		"stc",		0,									0,	0,		x64_Emit_STC,		"Set Carry Flag")
X64_ASM(X64_STD,		"std",		0,									0,	0,		x64_Emit_STD,		"Set Direction Flag")
X64_ASM(X64_STOSB,		"stos",		M_ECX|M_EDI|U_ECX|U_EDI,						0,	2,		x64_Emit_STOS,		"Store String Data")
X64_ASM(X64_SUB,		"sub",		0,									1,	2,		x64_Emit_SUB,		"Integer Subtraction")
X64_ASM(X64_TEST,		"test",		0,									0,	2,		x64_Emit_TEST,		"Logical Compare")
X64_ASM(X64_XADD,		"xadd",		0,									2,	2,		x64_Emit_XADD,		"Exchange and Add")
X64_ASM(X64_XCHG,		"xchg",		0,									2,	2,		x64_Emit_XCHG,		"Exchange Reg/Mem with Reg")
X64_ASM(X64_XOR,		"xor",		0,									1,	2,		x64_Emit_XOR,		"Logical Exclusive or")
X64_ASM(X64_RDTSC,      	"rdtsc",    	M_EAX|M_EDX,								2,	0,      x64_Emit_RDTSC,     "Read Time Stamp Counter")
X64_ASM(X64_SAVEREGS, 		"save_regs",	,							0,	0,		x64_Emit_SAVEREGS,  "Save registers before call")
X64_ASM(X64_LOADREGS, 		"load_regs",	,							0,	0,		x64_Emit_LOADREGS,  "Load registers after call")

X64_ASM(X64_SW_TABLE_ENTRY, 		"sw_table_entry", 	0,				0,  0,      x64_Emit_Sw_Table_Entry, 		"Switch Table Entry")
X64_ASM(X64_SW_TABLE_ENTRY_START, 	"sw_tab_en_start", 	0,				0,	0,    	x64_Emit_Sw_Table_Entry_Start, 	"Switch Table Entry Start")
X64_ASM(X64_COMMENT,	";",		0,					0,	0,		x64_Emit_Comment,				"Comment")
