 // File X86-ASM.DEF
// This file contains the definitions of the most common IA32 Assembly Instructions

// The Definition is in the format:
// X86_ASM(code, mnemonic, flags, n_defs, n_uses, emitfunction, description)

// code: Canonical Name 
// mnemonic: string for the instruction name
// flags: bit vector with some details of the instruction
// n_defs: max number of defined registers
// n_uses: max number of used registers
// emitfunction: pointer to the emit function
// description: string with a textual description of the operation


X86_ASM(X86_ADC,		"adc",		0,									1,	2,		x86_Emit_ADC,		"Add with Carry")
X86_ASM(X86_ADD,		"add",		0,									1,	2,		x86_Emit_ADD,		"Add")
X86_ASM(X86_AND,		"and",		0,									1,	2,		x86_Emit_AND,		"Logical And")
X86_ASM(X86_BSF,		"bsf",		0,									1,	2,		x86_Emit_BSF,		"Bit Scan Forward")
X86_ASM(X86_BSR,		"bsr",		0,									1,	2,		x86_Emit_BSR,		"Bit Scan Reverse")		
X86_ASM(X86_BSWAP,		"bswap",	0,									1,	1,		x86_Emit_BSWAP,		"x86_BYTE Swap")
X86_ASM(X86_BT,			"bt",		0,									0,	2,		x86_Emit_BT,		"Bit Test")
X86_ASM(X86_BTC,		"btc",		0,									1,	2,		x86_Emit_BTC,		"Bit Test And Complement")
X86_ASM(X86_BTR,		"btr",		0,									1,	2,		x86_Emit_BTR,		"Bit Test And Reset")
X86_ASM(X86_BTS,		"bts",		0,									1,	2,		x86_Emit_BTS,		"Bit Test And Set")
X86_ASM(X86_CALL,		"call",		M_EAX|M_ECX|M_EDX,					0,	1,		x86_Emit_CALL,		"Call Procedure")
X86_ASM(X86_CBW,		"cbw",		0,									1,	1,		x86_Emit_CBW,		"Convert x86_BYTE To x86_WORD")
X86_ASM(X86_CDQ,		"cdq",		0,									1,	1,		x86_Emit_CDQ,		"Convert Doubleword To Quax86_DWORD")
X86_ASM(X86_CLC,		"clc",		0,									0,	0,		x86_Emit_CLC,		"Clear Carry Flag")
X86_ASM(X86_CLD,		"cld",		0,									0,	0,		x86_Emit_CLD,		"Clear Direction Flag")
X86_ASM(X86_CMC,		"cmc",		0,									0,	0,		x86_Emit_CMC,		"Complement Carry Flag")
X86_ASM(X86_CMOV,		"cmov",		NEED_CC,							1,	1,		x86_Emit_CMOV,		"Conditional Move - (only for PII and above)")
X86_ASM(X86_CMP,		"cmp",		0,									0,	2,		x86_Emit_CMP,		"Compare Two Operands")	
X86_ASM(X86_CMPSB,		"cmps",		M_ECX|M_EDI|M_ESI|U_ECX|U_EDI|U_ESI,0,	2,		x86_Emit_CMPS,		"Compare String Operands")
X86_ASM(X86_CMPXCHG,	"cmpxchg",	0,									2,	2,		x86_Emit_CMPXHG,	"Compare And Exchange")
X86_ASM(X86_CWD,		"cwd",		0,									1,	1,		x86_Emit_CWD,		"Convert x86_WORD To Doubleword")
X86_ASM(X86_CWDE,		"cwde",		0,									1,	1,		x86_Emit_CWDE,		"Convert x86_WORD To Doubleword")
X86_ASM(X86_DEC,		"dec",		0,									1,	1,		x86_Emit_DEC,		"Decrement By 1")
X86_ASM(X86_DIV,		"div",		M_EAX|M_EDX|U_EAX|U_EDX,			2,	2,		x86_Emit_DIV,		"Unsigned Divide")
X86_ASM(X86_IDIV,		"idiv",		M_EAX|M_EDX|U_EAX|U_EDX,			2,	2,		x86_Emit_IDIV,		"Signed Divide")
X86_ASM(X86_IMUL,		"imul",		M_EAX|M_EDX|U_EAX,					2,	2,		x86_Emit_IMUL,		"Signed Multiply")
X86_ASM(X86_INC,		"inc",		0,									1,	1,		x86_Emit_INC,		"Increment By 1")
X86_ASM(X86_J,			"j",		NEED_CC,							0,	1,		x86_Emit_J,			"Jump If Condition Is Met")
X86_ASM(X86_JECXZ,		"jecxz",	0,									0,	2,		x86_Emit_JECXZ,		"Jump If ECX Is Zero")
X86_ASM(X86_JMP,		"jmp",		0,									0,	1,		x86_Emit_JMP,		"Unconditional Jump")
X86_ASM(X86_LEA,		"lea",		0,									1,	1,		x86_Emit_LEA,		"Load Effective Address")
X86_ASM(X86_LODSB,		"lods",		0,									1,	1,		x86_Emit_LODS,		"Load String Operand")
X86_ASM(X86_LOOP,		"loop",		M_ECX|U_ECX,						0,	1,		x86_Emit_LOOP,		"Loop Count")
X86_ASM(X86_LOOPNZ,		"loopnz",	M_ECX|U_ECX,						0,	1,		x86_Emit_LOOPNZ,	"Loop Count While Zero/Equal")
X86_ASM(X86_LOOPZ,		"loopz",	M_ECX|U_ECX,						0,	1,		x86_Emit_LOOPZ,		"Loop Count While Not Zero/Equal")
X86_ASM(X86_MOV,		"mov",		0,									1,	1,		x86_Emit_MOV,		"Move Data")
X86_ASM(X86_MOVSB,		"movs",		M_ECX|M_EDI|M_ESI|U_ECX|U_EDI|U_ESI,0,	2,		x86_Emit_MOVS,		"Move Data From String To String")
X86_ASM(X86_MOVSX,		"movsx",	0,									1,	1,		x86_Emit_MOVSX,		"Move With Sign-Extend")
X86_ASM(X86_MOVZX,		"movzx",	0,									1,	1,		x86_Emit_MOVZX,		"Move With Zero-Extend")
X86_ASM(X86_MUL,		"mul",		M_EAX|M_EDX|U_EAX,					0,	1,		x86_Emit_MUL,		"Unsigned Multiply")
X86_ASM(X86_NEG,		"neg",		0,									1,	1,		x86_Emit_NEG,		"Two's Complement Negation")
X86_ASM(X86_NOP,		"nop",		0,									0,	0,		x86_Emit_NOP,		"No Operation")
X86_ASM(X86_NOT,		"not",		0,									1,	1,		x86_Emit_NOT,		"One's Complement Negation")
X86_ASM(X86_OR,			"or",		0,									1,	2,		x86_Emit_OR,		"Logical Or")
X86_ASM(X86_POP,		"pop",		0,									1,	0,		x86_Emit_POP,		"Pop A x86_WORD From Stack")
X86_ASM(X86_POPFD,		"popfd",	0,									0,	0,		x86_Emit_POPFD,		"Pop Stack Into EFlags")
X86_ASM(X86_PUSH,		"push",		0,									0,	1,		x86_Emit_PUSH,		"Push Operand Onto The Stack")
X86_ASM(X86_PUSHFD,		"pushfd",	0,									0,	0,		x86_Emit_PUSHFD,	"Push Flags Reg Onto The Stack")
X86_ASM(X86_RET,		"ret",		0,									0,	0,		x86_Emit_RET,		"Return From Procedure")
X86_ASM(X86_ROL,		"rol",		U_ECX,								1,	2,		x86_Emit_ROL,		"Rotate Left")
X86_ASM(X86_ROR,		"ror",		U_ECX,								1,	2,		x86_Emit_ROR,		"Rotate Right")
X86_ASM(X86_SAL,		"sal",		U_ECX,								1,	2,		x86_Emit_SAL,		"Shift Arithmetic Left")
X86_ASM(X86_SAR,		"sar",		U_ECX,								1,	2,		x86_Emit_SAR,		"Shift Arithmetic Right")
X86_ASM(X86_SBB,		"sbb",		0,									1,	2,		x86_Emit_SBB,		"Integer Subtraction With Borrow")
X86_ASM(X86_SCASB,		"scas",		M_ECX|M_EDI|U_ECX|U_EDI,			0,	2,		x86_Emit_SCAS,		"Scan String")
X86_ASM(X86_SET,		"set",		NEED_CC,							0,	1,		x86_Emit_SET,		"x86_BYTE Set On Condition")
X86_ASM(X86_SHL,		"shl",		U_ECX,								1,	2,		x86_Emit_SHL,		"Shift Left")
X86_ASM(X86_SHR,		"shr",		U_ECX,								1,	2,		x86_Emit_SHR,		"Shift Right")
X86_ASM(X86_STC,		"stc",		0,									0,	0,		x86_Emit_STC,		"Set Carry Flag")
X86_ASM(X86_STD,		"std",		0,									0,	0,		x86_Emit_STD,		"Set Direction Flag")
X86_ASM(X86_STOSB,		"stos",		M_ECX|M_EDI|U_ECX|U_EDI,			0,	2,		x86_Emit_STOS,		"Store String Data")
X86_ASM(X86_SUB,		"sub",		0,									1,	2,		x86_Emit_SUB,		"Integer Subtraction")
X86_ASM(X86_TEST,		"test",		0,									0,	2,		x86_Emit_TEST,		"Logical Compare")
X86_ASM(X86_XADD,		"xadd",		0,									2,	2,		x86_Emit_XADD,		"Exchange and Add")
X86_ASM(X86_XCHG,		"xchg",		0,									2,	2,		x86_Emit_XCHG,		"Exchange Reg/Mem with Reg")
X86_ASM(X86_XOR,		"xor",		0,									1,	2,		x86_Emit_XOR,		"Logical Exclusive or")
X86_ASM(X86_RDTSC,      "rdtsc",    M_EAX|M_EDX,						2,  0,      x86_Emit_RDTSC,     "Read Time Stamp Counter")
X86_ASM(X86_SAVEREGS, 	"save_regs",U_EAX|U_ECX|U_EDX,					0,  0,		x86_Emit_SAVEREGS,  "Save registers before call")
X86_ASM(X86_LOADREGS, 	"load_regs",M_EAX|M_ECX|M_EDX,					0,  0,		x86_Emit_LOADREGS,  "Load registers after call")

X86_ASM(X86_SW_TABLE_ENTRY, "sw_table_entry", 0,        0,  0,      x86_Emit_Sw_Table_Entry, "Switch Table Entry")
X86_ASM(X86_SW_TABLE_ENTRY_START, "sw_tab_en_start", 0,0,0,    x86_Emit_Sw_Table_Entry_Start, "Switch Table Entry Start")
X86_ASM(X86_COMMENT,	";",		0,					0,	0,		x86_Emit_Comment,				"Comment")
